{%- set enum_base_class_name = "enum_base" -%}
{%- set enhanced_enum_namespace_name = "enhanced_enum" -%}
{%- set value_type_alias = "value_type" -%}
{%- set enhance_function = "enhance" -%}

{%- macro enum_base_class() -%}
    ::{{ enhanced_enum_namespace_name }}::{{ enum_base_class_name }}<{{ d.enhanced_enum_typename }}, {{ d.label_enum_typename }}, {{ d.value_type_typename }}>
{%- endmacro -%}

enum class {{ d.label_enum_typename }} {
{%- for member in d.members %}
    {{ member.enumerator_name }},
{%- endfor %}
};

struct {{ d.enhanced_enum_typename }} : {{ enum_base_class() }} {
    using {{ enum_base_class() }}::{{ enum_base_class_name }};
    {%- for member in d.members %}
    static constexpr {{ value_type_alias }} {{ member.enumerator_value_constant_name }} { {{ initializer(member.enumerator_value) }} };
    {%- endfor %}
    static constexpr std::array<{{ value_type_alias }}, {{ d.members|length }}> values {
    {%- for member in d.members %}
        {{ member.enumerator_value_constant_name }},
    {%- endfor %}
    };
};

constexpr {{ d.enhanced_enum_typename }} {{ enhance_function }}({{ d.label_enum_typename }} e) noexcept
{
    return e;
}

namespace Statuses {
{%- for member in d.members %}
constexpr {{ d.enhanced_enum_typename }} {{ member.enumerator_name }} { {{ d.label_enum_typename }}::{{ member.enumerator_name }} };
{%- endfor %}
}
